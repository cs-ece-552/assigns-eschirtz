
/*
   CS/ECE 552, Spring '19
   Auto generated by python
*/
module control_hier_bench_csv(/*AUTOARG*/);
   /*AUTOWIRE*/
   // Beginning of automatic wires (for undeclared instantiated-module outputs)
   wire       err;
   wire       RegWrite, DMemWrite,              // From top of control_hier.v
              DMemEn, ALUSrc2, PCSrc,           // From top of control_hier.v
              PCImm, MemToReg, DMemDump, Jump;         // From top of control_hier.v
   wire [1:0] RegDst;                           // From top of control_hier.v
   wire [2:0] SESel;                            // From top of control_hier.v
   // End of automatics
   /*AUTOREGINPUT*/
   // Beginning of automatic reg inputs (for undeclared instantiated-module inputs)
   reg [4:0]  OpCode;                           // To top of control_hier.v
   reg [1:0]  Funct;                            // To top of control_hier.v
   // End of automatics

   integer    cycle_count;

   wire       clk;
   wire       rst;

   reg        fail;
   reg [5:0]  errorCount;

   // Instantiate the module we want to verify

   control_hier DUT(/*AUTOINST*/
                    // Outputs
                    .err                          (err),
                    .RegDst                       (RegDst),
                    .SESel                        (SESel),
                    .RegWrite                     (RegWrite),
                    .DMemWrite                    (DMemWrite),
                    .DMemEn                       (DMemEn),
                    .ALUSrc2                      (ALUSrc2),
                    .PCSrc                        (PCSrc),
                    .PCImm                        (PCImm),
                    .MemToReg                     (MemToReg),
                    .DMemDump                     (DMemDump),
                    .Jump                         (Jump),
                    // Inputs
                    .OpCode                       (OpCode),
                    .Funct                        (Funct));

    assign               clk = DUT.clk_generator.clk;
    assign               rst = DUT.clk_generator.rst;
    initial begin
      errorCount = 6'b0;
      $display("Running Tests...\n");



      OpCode = 5'b00000;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("HALT");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b0 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b1 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 1);
          end
        end
      OpCode = 5'b00001;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("NOP");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b0 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 2);
          end
        end
      OpCode = 5'b00010;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("siic Rs");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b0 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 3);
          end
        end
      OpCode = 5'b00011;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("NOP/RTI");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b0 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 4);
          end
        end
      OpCode = 5'b00100;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("J");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'b11x ||
          RegWrite !== 1'b0 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b1 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b1
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 5);
          end
        end
      OpCode = 5'b00101;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("JR");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'b10x ||
          RegWrite !== 1'b0 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b1 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b1 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 6);
          end
        end
      OpCode = 5'b00110;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("JAL");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b11 ||
          SESel !== 3'b11x ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b1 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b1
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 7);
          end
        end
      OpCode = 5'b00111;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("JALR");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b11 ||
          SESel !== 3'b10x ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b1 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b1 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 8);
          end
        end
      OpCode = 5'b01000;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("SUBI");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b01 ||
          SESel !== 3'b01x ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 9);
          end
        end
      OpCode = 5'b01001;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("ADDI");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b01 ||
          SESel !== 3'b01x ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 10);
          end
        end
      OpCode = 5'b01010;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("ANDNI");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b01 ||
          SESel !== 3'bxx0 ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 11);
          end
        end
      OpCode = 5'b01011;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("XORI");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b01 ||
          SESel !== 3'bxx0 ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 12);
          end
        end
      OpCode = 5'b01100;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("BNEZ");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'b10x ||
          RegWrite !== 1'b0 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b1 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 13);
          end
        end
      OpCode = 5'b01101;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("BEQZ");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'b10x ||
          RegWrite !== 1'b0 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b1 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 14);
          end
        end
      OpCode = 5'b01110;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("BLTZ");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'b10x ||
          RegWrite !== 1'b0 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b1 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 15);
          end
        end
      OpCode = 5'b01111;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("BGEZ");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'b10x ||
          RegWrite !== 1'b0 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b1 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 16);
          end
        end
      OpCode = 5'b10000;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("ST");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'b01x ||
          RegWrite !== 1'b0 ||
          DMemWrite !== 1'b1 ||
          DMemEn !== 1'b1 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 17);
          end
        end
      OpCode = 5'b10001;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("LD");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'b01x ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b1 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b1 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 18);
          end
        end
      OpCode = 5'b10010;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("SLBI");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b10 ||
          SESel !== 3'bxx1 ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 19);
          end
        end
      OpCode = 5'b10011;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("STU");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b10 ||
          SESel !== 3'b01x ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b1 ||
          DMemEn !== 1'b1 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 20);
          end
        end
      OpCode = 5'b10100;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("ROLI");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'bxx0 ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 21);
          end
        end
      OpCode = 5'b10101;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("SLLI");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'bxx0 ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 22);
          end
        end
      OpCode = 5'b10110;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("RORI");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'bxx0 ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 23);
          end
        end
      OpCode = 5'b10111;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("SRLI");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'bxx0 ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 24);
          end
        end
      OpCode = 5'b11000;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("LBI");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b10 ||
          SESel !== 3'b10x ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 25);
          end
        end
      OpCode = 5'b11001;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("BTR");
        if(
          err !== 1'b0 ||
          RegDst !== 2'bxx ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b0 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 26);
          end
        end
      OpCode = 5'b11010;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("ROL");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b00 ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b1 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 27);
          end
        end
      OpCode = 5'b11010;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("SLL");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b00 ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b1 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 28);
          end
        end
      OpCode = 5'b11010;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("ROR");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b00 ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b1 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 29);
          end
        end
      OpCode = 5'b11010;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("SRL");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b00 ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b1 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 30);
          end
        end
      OpCode = 5'b11011;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("ADD");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b00 ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b1 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 31);
          end
        end
      OpCode = 5'b11011;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("SUB");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b00 ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b1 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 32);
          end
        end
      OpCode = 5'b11011;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("XOR");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b00 ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b1 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 33);
          end
        end
      OpCode = 5'b11011;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("ANDN");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b00 ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b1 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 34);
          end
        end
      OpCode = 5'b11100;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("SEQ");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b00 ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b1 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 35);
          end
        end
      OpCode = 5'b11101;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("SLT");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b00 ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b1 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 36);
          end
        end
      OpCode = 5'b11110;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("SLE");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b00 ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b1 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 37);
          end
        end
      OpCode = 5'b11111;
      Funct = 2'bxx;
      repeat(2) @(posedge clk);
      @(posedge clk)begin
        $display("SCO");
        if(
          err !== 1'b0 ||
          RegDst !== 2'b00 ||
          SESel !== 3'bxxx ||
          RegWrite !== 1'b1 ||
          DMemWrite !== 1'b0 ||
          DMemEn !== 1'b0 ||
          ALUSrc2 !== 1'b1 ||
          PCSrc !== 1'b0 ||
          MemToReg !== 1'b0 ||
          DMemDump !== 1'b0 ||
          Jump !== 1'b0 ||
          PCImm !== 1'b0
          ) begin
          errorCount = errorCount + 1;
          $display("	ERROR!");
          $display("	OUTPUT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          $display("	EXPECT: Opcode: %b   ->   Error: %b, RegDst: %b, SESel: %b, RegWrite: %b, DMemWrite: %b, DMemEn: %b, ALUSrc2: %b, PCSrc: %b, MemToReg: %b, DMemDump: %b, Jump: %b, PCImm: %b\n", OpCode, err,
                    RegDst,
                    SESel,
                    RegWrite,
                    DMemWrite,
                    DMemEn,
                    ALUSrc2,
                    PCSrc,
                    MemToReg,
                    DMemDump,
                    Jump,
                    PCImm);
          end else begin
            $display("	PASSED [%d]", 38);
          end
        end
      $display("Test Completed");
      $display("Number Of Errors: %d", errorCount);
      $finish;
    end

endmodule // control_hier_bench
